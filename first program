#Python Tutorial STARTING DATE : 17.11.2022
print("My first program")
print('My first program')
print(5+10)
print(5*10)
print(5+2*5)
print((5+2)*0)
print(100/3)
print(100-3)
print("new")
print(100//3)
print(2*3)
print("new")
print(2**3) # 2 power 3
print(100%7)
print(100%9)
print(100%2)
print(2**3+2*3)
print((2**3)+2*3)
print((2**3+2)*3)

#Identifiers 0r vareables or reference variables
#only underscore is allowerd
#other then _ no special character is allowed
# if we use underscore or many underscore in the beginning of the variable the variable is private variable 

_doorNo_="Ezhil raj"
print(_doorNo_)

#output Ezhil raj
doorNo=15
print(doorNo)

#output:15
 
# RESERVED WORDS
# True / False /None
# and / or / not / is /as /in /lambda /nonlocal
# if / elif / else /from /global /import
# while / for / break / continue
# return / yield /in / class / def
# try / except / finally / raise / assert
# pass /with

# DATATYPES:
# Dynamically Typed  

# int /float /complex /bool /str /bytes /bytearrsy 
# range /list /set /frozenset /tuple /dict /None

no=10
print(no) #parameters / argument -->with in the bracket-->input

print(type(no))
# output : <class 'int'>

no="ezhil"
print(no) #parameters / argument -->with in the bracket-->input

print(type(no))
output:ezhil
<class 'str'>

no="ezhil"
print(no) #id-->Address 
print(id(no)) 

output : ezhil
1549573289264

no="ezhil"
print(no) 
print(len(no))
 output:ezhil
5

no=12.23456576537
print(no) 12.23456576537
print(round(no))-->12
print(round(no,3))-->12.235

#int datatype

# it has Decimal Form
# it has Binary Form   -->0s & 1s
#  it has octal form
# it has hexadecimal form
no=1223 #-->decimal form
no=0B0101 #-->binary
print(no)
no=0b1001 #-->binary
print(no)
no=0o0101 #-->octal
print(no)
no=0O1001  #-->octal
print(no)
no=0X123  #-->Hexadecimal
print(no)  #-->Hexadecimal
no=0xabc   #-->Hexadecimal
print(no)  #-->Hexadecimal
no=0XCAB
print(no)  #-->Hexadecimal

no=bin(20)
print(no)
no=oct(20)
print(no)
no=hex(20)
print(no)
 output :0b10100
0o24
0x14

no=7.7e3  #e3-->10 power 3
print(no)
output:7700.0

#complex data type
#Real part +Imaginary part
no=5+10j
print(no)
print(type(no))
no2=10+3j
total=no+no2
print(total)
 print(no2.real)
print(no2.imag)

 output:(5+10j)
<class 'complex'>
(15+13j)
10.0
3.0

#Boolean Datatype

print(True+True)  #True-->1
print(True+False)  #False-->0
print(False+False)

output:2
1
0

# String Datatype:

sen="""ezhil's maon said "obay me" byt he's not obayed"""
sen1='''ezhil's maon said "obay me" byt he's not obayed'''
sen2="""ezhil's maon said
       "obay me" byt he's
      not obayed"""

print(sen)#"""vjh""" -->triple
print(sen1)#'''vjh''' -->triple
print(sen2)#'''vjh''' -->MultiLine
name='ezhikl'
c="raj"
print(name+c)#-->no spce
print(name,c)#-->with space

name='ezhikl'
c=638104
print(name,c)#-->with space and no datatype error

# String Slicing:
name="ezhil"
print(name[0])
print(name[3])
print(name[-1])
print(name[-3])
name="rajarajachozhan"
print(name[0:5])
print(name[7:])
print(name[:4])
print(name[4:])
print(name[-5:-1])
print(name[::]) #-->printd all the value
print(name[1:10:2]) #every second letter from 1 aaaac
print(name[8:1:-1]) #reverse


#TypeCasting: int
no=99.45
print(int(no)) #-->99

#Float
no="10"
print(float(True))
print(float(no))

#complex
print(complex(10))
print(complex(5.4))
print(complex(True))
print(complex(False))
print(complex("12"))
print(complex("12.7"))
print(complex(120,10))

#bool()
print(bool(0))
print(bool(1))
print(bool(1.5))
print(bool(0.3))
print(bool(0.0))
print(bool(5+4j))
print(bool(0+4j))
print(bool(0+0j))
print(bool("abc"))
print(bool(""))
print(bool("True"))
print(bool("False"))
    
#str()
print(str(10))
print("price"+ str(10))
print(str(34.4))
print(str(5+10j))
print(str(True))
print(str(False))

#All fundamental(int float str complex bo ol) datatype are immutable
no=10
print(id(no))
no2=10
print(id(no2))
#hasename memory address
no2=20
print(id(no2))
#once we change value of an identifier belongs to fundamental
#datatypes it wont get change in memory instead of that , a new memory is
# created and the new value will be allocated

no=10
no2=10
print(no==no2) # true
print(no is no2) #true
no2=10.0
print(no==no2)# true
print(no is no2)#false  check the memory address
print(no is not no2)  #true

#bytes-->group of byte numbers
#1byte-->8bit -->2 power 8-->256
#we can store upto 256
value=[90,80,70,60,67] #list
print(value)
value=bytes(value)  # type casting
print(type(value))
print(value)
print(value[0])  #90
for no in value:
    print(no)

